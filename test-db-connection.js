// Test de connexion √† MongoDB
require('dotenv').config({ path: '.env.local' });
const { MongoClient } = require('mongodb');

async function testMongoConnection() {
  console.log('\n=== Test de connexion √† MongoDB ===\n');
  
  const uri = process.env.MONGODB_URI;
  const dbName = process.env.MONGODB_DB || 'planner_db';
  const collectionName = process.env.MONGODB_COLLECTION || 'tasks';
  
  console.log(`URI configur√©e: ${uri ? 'Oui' : 'Non'}`);
  console.log(`Base de donn√©es: ${dbName}`);
  console.log(`Collection: ${collectionName}`);
  
  if (!uri) {
    console.error('\nErreur: Variable d\'environnement MONGODB_URI non d√©finie');
    console.log('Veuillez configurer votre fichier .env.local avec MONGODB_URI');
    return;
  }
  
  try {
    console.log('\nCr√©ation du client MongoDB...');
    const client = new MongoClient(uri);
    
    console.log('Connexion √† MongoDB...');
    await client.connect();
    console.log('‚úÖ Connexion r√©ussie!');
    
    console.log(`\nAcc√®s √† la base de donn√©es '${dbName}'...`);
    const db = client.db(dbName);
    console.log('‚úÖ Acc√®s √† la base de donn√©es r√©ussi!');
    
    console.log(`\nR√©cup√©ration des collections...`);
    const collections = await db.listCollections().toArray();
    console.log(`‚úÖ ${collections.length} collection(s) trouv√©e(s):`);
    collections.forEach(collection => {
      console.log(`   - ${collection.name}`);
    });
    
    console.log(`\nRecherche de la collection '${collectionName}'...`);
    const targetCollection = collections.find(c => c.name === collectionName);
    
    if (targetCollection) {
      console.log(`‚úÖ Collection '${collectionName}' trouv√©e!`);
      
      console.log(`\nComptage des documents...`);
      const count = await db.collection(collectionName).countDocuments();
      console.log(`‚úÖ ${count} document(s) dans la collection`);
      
      if (count > 0) {
        console.log(`\nR√©cup√©ration d'un exemple de document...`);
        const doc = await db.collection(collectionName).findOne();
        console.log('‚úÖ Document r√©cup√©r√©:');
        console.log(JSON.stringify(doc, null, 2));
      }
    } else {
      console.log(`‚ùå Collection '${collectionName}' non trouv√©e`);
    }
    
    // V√©rification sp√©cifique pour les t√¢ches
    if (collectionName === 'tasks') {
      console.log('\nV√©rification du document "travaux"...');
      const travauxDoc = await db.collection(collectionName).findOne({ _id: 'travaux' });
      
      if (travauxDoc) {
        console.log('‚úÖ Document "travaux" trouv√©!');
        console.log(`Structure des zones:`);
        Object.keys(travauxDoc.data).forEach(zone => {
          console.log(`   - ${zone}: ${travauxDoc.data[zone].length} t√¢che(s)`);
        });
      } else {
        console.log('‚ùå Document "travaux" non trouv√©');
      }
    }
    
    console.log('\nFermeture de la connexion...');
    await client.close();
    console.log('‚úÖ Connexion ferm√©e');
    
    console.log('\nüéâ Test de connexion MongoDB termin√© avec succ√®s!');
  } catch (error) {
    console.error('\n‚ùå Erreur lors de la connexion √† MongoDB:');
    console.error(error);
    
    console.log('\nSuggestions de r√©solution:');
    console.log('1. V√©rifiez que votre cha√Æne de connexion (MONGODB_URI) est correcte');
    console.log('2. Assurez-vous que votre adresse IP est autoris√©e dans MongoDB Atlas (Network Access)');
    console.log('3. V√©rifiez que vos identifiants sont corrects');
    console.log('4. Assurez-vous que la base de donn√©es et la collection existent');
  }
}

// Ex√©cution du test
testMongoConnection().catch(error => {
  console.error('Erreur non g√©r√©e:', error);
}); 